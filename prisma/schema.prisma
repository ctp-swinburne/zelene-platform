// This is your Prisma schema file
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    devices        Device[]
    deviceProfiles DeviceProfile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Device related models
model Device {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    name      String
    deviceId  String       @unique
    status    DeviceStatus @default(OFFLINE)
    profileId String?
    userId    String
    lastSeen  DateTime?

    profile DeviceProfile? @relation(fields: [profileId], references: [id])
    user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([profileId])
    @@index([userId])
}

model DeviceProfile {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    name        String
    description String?
    transport   TransportType @default(MQTT)
    isDefault   Boolean       @default(false)
    userId      String

    devices Device[]
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, isDefault])
    @@index([userId])
}

enum DeviceStatus {
    ONLINE
    OFFLINE
    MAINTENANCE
    ERROR
}

enum TransportType {
    MQTT
    TCP
}
